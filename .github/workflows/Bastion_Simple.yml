name: Deploy Simple Bastion

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - apply
          - destroy
        default: "apply"

      aws_account:
        description: "AWS Account to use"
        required: true
        type: choice
        options:
          - alexander-test
          - eliza-dev
          - emir-production

      bucket_name:
        description: "S3 bucket name for Terraform state"
        required: true
        type: string

      bucket_region:
        description: "S3 bucket region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1

      instance_type:
        description: "Instance type for bastion host"
        required: true
        type: choice
        options:
          - t2.micro
          - t3.micro
          - t2.nano
          - t2.small
        default: "t2.micro"
      
      bastion_region:
        description: "Bastion deployment region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1

      key_name:
        description: "SSH key pair name"
        required: true
        type: string
        default: "bastion-key"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.bastion_instance_region }}
    steps:
      - name: Checkout Current Repository (ProjectNagiosWorkflows)
        uses: actions/checkout@v4
        with:
          path: ProjectNagiosWorkflows

      - name: Checkout Private Repository (ProjectNagios)
        uses: actions/checkout@v4
        with:
          repository: "DevOps-Triumvirat/ProjectNagios"
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: ProjectNagios

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS Credentials (Eliza Dev)
        if: ${{ inputs.aws_account == 'eliza-dev' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ inputs.bastion_region }}

      - name: Configure AWS Credentials (Alexander Test)
        if: ${{ inputs.aws_account == 'alexander-test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.bastion_region }}

      - name: Configure AWS Credentials (Emir Production)
        if: ${{ inputs.aws_account == 'emir-production' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ inputs.bastion_region }}

      - name: Terraform Init
        working-directory: ProjectNagios/Terraform/BastionSimple
        run: |
          terraform init \
            -backend-config="bucket=${{ inputs.bucket_name }}" \
            -backend-config="key=bastion-simple/terraform.tfstate" \
            -backend-config="region=${{ inputs.bucket_region }}"

      - name: Terraform Plan
        working-directory: ProjectNagios/Terraform/BastionSimple
        run: |
          terraform plan \
            -var="region=${{ inputs.bastion_region }}" \
            -var="instance_type=${{ inputs.instance_type }}" \
            -var="key_name=${{ inputs.key_name }}"

      - name: Terraform Apply
        if: inputs.action == 'apply'
        working-directory: ProjectNagios/Terraform/BastionSimple
        run: |
          terraform apply -auto-approve \
            -var="region=${{ inputs.bastion_region }}" \
            -var="instance_type=${{ inputs.instance_type }}" \
            -var="key_name=${{ inputs.key_name }}"

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: ProjectNagios/Terraform/BastionSimple
        run: |
          terraform destroy -auto-approve \
            -var="region=${{ inputs.bastion_region }}" \
            -var="instance_type=${{ inputs.instance_type }}" \
            -var="key_name=${{ inputs.key_name }}"

      - name: Show Bastion Information
        if: inputs.action == 'apply'
        working-directory: ProjectNagios/Terraform/BastionSimple
        run: |
          echo "=== Bastion Instance Information ==="
          echo "Instance ID: $(terraform output -raw bastion_instance_id)"
          echo "Public IP: $(terraform output -raw bastion_public_ip)"
          echo "Private IP: $(terraform output -raw bastion_private_ip)"
          echo "SSH Key Name: $(terraform output -raw ssh_key_name)"
          echo "SSH Command: $(terraform output -raw ssh_command)"
          echo "Private Key SSM Parameter: $(terraform output -raw private_key_ssm_parameter)"
