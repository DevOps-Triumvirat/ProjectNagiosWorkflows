name: Build Bastion AMI Image

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose whether to create or destroy the Bastion AMI"
        required: true
        type: choice
        options:
          - create_AMI
          - destroy_AMI_snapshot

      aws_account:
        description: "AWS Account to use"
        required: true
        type: choice
        options:
          - alexander-test
          - eliza-dev
          - emir-production

      region:
        description: "AWS region for AMI image"
        required: true
        type: choice
        options:
          - ca-central-1
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2


jobs:
  bastion-image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.region }}
    steps:
      - name: Checkout Current Repository (ProjectNagiosWorkflows)
        uses: actions/checkout@v4
        with:
          path: ProjectNagiosWorkflows

      - name: Checkout Private Repository (ProjectNagios)
        uses: actions/checkout@v4
        with:
          repository: "DevOps-Triumvirat/ProjectNagios"
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: ProjectNagios

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Configure AWS Credentials (Alexander Test)
        if: ${{ inputs.aws_account == 'alexander-test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials (Eliza Dev)
        if: ${{ inputs.aws_account == 'eliza-dev' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials (Emir Production)
        if: ${{ inputs.aws_account == 'emir-production' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ inputs.region }}

      - name: Packer Init
        if: ${{ inputs.action == 'create_AMI' }}
        working-directory: ProjectNagios/Packer
        run: packer init server_bastion.pkr.hcl

      - name: Packer Validate
        if: ${{ inputs.action == 'create_AMI' }}
        working-directory: ProjectNagios/Packer
        run: packer validate server_bastion.pkr.hcl

      - name: Create Bastion AMI
        if: ${{ inputs.action == 'create_AMI' }}
        working-directory: ProjectNagios/Packer
        run: |
          echo "Starting Packer build for Bastion AMI..."
          echo "Region: ${{ inputs.region }}"
          echo "Instance Type: t3.small"
          echo "AMI Name: Bastion-ami"
          echo "AWS Account: ${{ inputs.aws_account }}"
          
          packer build \
            -var "region=${{ inputs.region }}" \
            -var "built_by=${{ inputs.aws_account }}" \
            server_bastion.pkr.hcl

      - name: Get AMI Information
        if: ${{ inputs.action == 'create_AMI' }}
        working-directory: ProjectNagios/Packer
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --region ${{ inputs.region }} \
            --owners self \
            --filters "Name=name,Values=Bastion-ami*" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
            --output text)

          if [ "$AMI_ID" != "None" ] && [ "$AMI_ID" != "" ]; then
            echo "Created AMI ID: $AMI_ID"
            aws ec2 describe-images \
              --region ${{ inputs.region }} \
              --image-ids $AMI_ID \
              --query 'Images[0].{Name:Name,ImageId:ImageId,State:State,CreationDate:CreationDate}' \
              --output table
          else
            echo "Warning: Could not retrieve AMI information"
          fi

      - name: Destroy Bastion AMI
        if: ${{ inputs.action == 'destroy_AMI_snapshot' }}
        working-directory: ProjectNagios/Packer
        run: |
          echo "Searching for latest Bastion AMI to destroy..."
          AMI_ID=$(aws ec2 describe-images \
            --region ${{ inputs.region }} \
            --owners self \
            --filters "Name=name,Values=Bastion-ami*" \
            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
            --output text)

          if [ "$AMI_ID" == "None" ] || [ -z "$AMI_ID" ]; then
            echo "No Bastion AMI found to destroy."
            exit 0
          fi

          echo "Deregistering AMI: $AMI_ID"
          aws ec2 deregister-image --region ${{ inputs.region }} --image-id $AMI_ID

          SNAPSHOT_IDS=$(aws ec2 describe-snapshots \
            --region ${{ inputs.region }} \
            --filters "Name=description,Values=*${AMI_ID}*" \
            --query 'Snapshots[*].SnapshotId' \
            --output text)

          for SNAP_ID in $SNAPSHOT_IDS; do
            echo "Deleting snapshot: $SNAP_ID"
            aws ec2 delete-snapshot --region ${{ inputs.region }} --snapshot-id $SNAP_ID
          done
