name: Create s3 Bucket

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform on S3 bucket"
        required: true
        type: choice
        options:
          - create
          - destroy
        default: "create"
      bucket:
        description: "S3 bucket name"
        required: true
        type: string
      aws_account:
        description: "AWS Account to use"
        required: true
        type: choice
        options:
          - alexander-test
          - eliza-dev
          - emir-production
      region:
        description: "AWS region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
  workflow_call:
    inputs:
      action:
        description: "Action to perform on S3 bucket"
        required: true
        type: string
      bucket:
        description: "S3 bucket name"
        required: true
        type: string
      aws_account:
        description: "AWS Account to use"
        required: true
        type: string
      region:
        description: "AWS region"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS Credentials for Test Account
        if: inputs.aws_account == 'alexander-test'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Production Account
        if: inputs.aws_account == 'emir-production'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}"
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Dev Account
        if: inputs.aws_account == 'eliza-dev'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          aws-region: ${{ inputs.region }}

      - name: Write Terraform config for S3 bucket creation
        run: |
          cat > bucket-main.tf <<EOF
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "${{ inputs.region }}"
          }

          # Create S3 bucket for tfstate with object lock enabled
          resource "aws_s3_bucket" "tf_state" {
            bucket        = "${{ inputs.bucket }}"
            object_lock_enabled = true           
          }

          # Enable versioning
          resource "aws_s3_bucket_versioning" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            versioning_configuration {
              status = "Enabled"
            }
          }

          # Enable encryption
          resource "aws_s3_bucket_server_side_encryption_configuration" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            rule {
              apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
              }
            }
          }

          EOF

      - name: Terraform Init
        run: terraform init

      - name: Import existing resources 
        if: inputs.action == 'destroy'
        run: |
          terraform import aws_s3_bucket.tf_state "${{ inputs.bucket }}" 
          terraform import aws_s3_bucket_versioning.tf_state "${{ inputs.bucket }}" 
          terraform import aws_s3_bucket_server_side_encryption_configuration.tf_state "${{ inputs.bucket }}" 

      - name: Terraform Apply
        if: inputs.action == 'create'
        run: terraform apply -auto-approve

      - name: Create empty nagios/terraform.tfstate file
        if: inputs.action == 'create'
        run: |
          # Create an empty terraform state file for nagios (not the bucket creation state)
          echo '{}' > empty_nagios_state.json
          
          # Upload the empty state file to the nagios folder
          aws s3 cp empty_nagios_state.json s3://${{ inputs.bucket }}/nagios/terraform.tfstate
          echo "Created empty nagios/terraform.tfstate file in bucket ${{ inputs.bucket }}"

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        run: terraform destroy -auto-approve 

