name: Create S3 Bucket

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform on S3 bucket"
        required: true
        type: choice
        options:
          - create
          - destroy
        default: create
      bucket:
        description: "Unique S3 bucket name"
        required: true
        type: string
      aws_account:
        description: "AWS account to use"
        required: true
        type: choice
        options:
          - Test
          - Development
          - Production
      region:
        description: "AWS region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1

jobs:
  manage-bucket:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: ${{ inputs.region }}
      AWS_REGION: ${{ inputs.region }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS Credentials for Test
        if: ${{ inputs.aws_account == 'Test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_Test }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_Test }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Development
        if: ${{ inputs.aws_account == 'Development' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_Development }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_Development }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Production
        if: ${{ inputs.aws_account == 'Production' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_Production }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_Production }}
          aws-region: ${{ inputs.region }}

      - name: Verify AWS Setup
        run: |
          echo "Region: $AWS_REGION"
          aws sts get-caller-identity

      - name: Generate Terraform Config for Bucket
        run: |
          cat > bucket.tf <<EOF
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "${{ inputs.region }}"
          }

          resource "aws_s3_bucket" "tf_state" {
            bucket              = "${{ inputs.bucket }}"
            object_lock_enabled = true
          }

          resource "aws_s3_bucket_versioning" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            versioning_configuration {
              status = "Enabled"
            }
          }

          resource "aws_s3_bucket_server_side_encryption_configuration" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            rule {
              apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply (Create Bucket)
        if: ${{ inputs.action == 'create' }}
        run: terraform apply -auto-approve

      - name: Empty S3 bucket before destruction
        if: ${{ inputs.action == 'destroy' }}
        run: |
          echo "Emptying bucket ${{ inputs.bucket }} before destruction..."
          
          # Remove all objects and versions from the bucket
          aws s3 rm s3://${{ inputs.bucket }} --recursive || echo "Bucket already empty or doesn't exist"
          
          # Delete all object versions (for versioned buckets)
          aws s3api list-object-versions --bucket "${{ inputs.bucket }}" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
            if [ ! -z "$key" ] && [ ! -z "$version" ]; then
              echo "Deleting version $version of $key"
              aws s3api delete-object --bucket "${{ inputs.bucket }}" --key "$key" --version-id "$version"
            fi
          done
          
          # Remove all delete markers
          aws s3api list-object-versions --bucket "${{ inputs.bucket }}" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
            if [ ! -z "$key" ] && [ ! -z "$version" ]; then
              echo "Deleting delete marker $version of $key"
              aws s3api delete-object --bucket "${{ inputs.bucket }}" --key "$key" --version-id "$version"
            fi
          done
          
          echo "Bucket ${{ inputs.bucket }} has been emptied"

      - name: Import existing resources for destruction
        if: ${{ inputs.action == 'destroy' }}
        run: |
          echo "Importing existing S3 bucket resources into Terraform state..."
          
          # Import the bucket itself
          terraform import aws_s3_bucket.tf_state "${{ inputs.bucket }}" || echo "Bucket import failed or already imported"
          
          # Import bucket versioning configuration
          terraform import aws_s3_bucket_versioning.tf_state "${{ inputs.bucket }}" || echo "Versioning import failed or already imported"
          
          # Import server-side encryption configuration
          terraform import aws_s3_bucket_server_side_encryption_configuration.tf_state "${{ inputs.bucket }}" || echo "Encryption import failed or already imported"
          
          echo "Resource import completed"

      - name: Terraform Destroy (Destroy Bucket)
        if: ${{ inputs.action == 'destroy' }}
        run: |
          echo "Destroying S3 bucket ${{ inputs.bucket }} with Terraform..."
          terraform destroy -auto-approve
          echo "Bucket ${{ inputs.bucket }} destroyed successfully"

          