name: Create_Bucket

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Create or destroy s3 bucket"
        required: true
        type: choice
        options:
          - create_bucket
          - destroy_bucket
      aws_account:
        description: "Choose AWS Account to use"
        required: true
        type: choice
        options:
          - alexander-test
          - emir-production
      bucket:
        description: "S3 bucket name for Terraform state file"
        required: true
        type: string
      region:
        description: "Choose AWS region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2

        
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS Credentials for Test Account
        if: inputs.aws_account == 'alexander-test'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_TEST }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}"
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Production Account
        if: inputs.aws_account == 'emir-production'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}"
          aws-region: ${{ inputs.region }}

      - name: Write Terraform config for S3 bucket creation
        run: |
          cat > bucket-main.tf <<EOF
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "${{ inputs.region }}"
          }

          # Create S3 bucket for tfstate
          resource "aws_s3_bucket" "tf_state" {
            bucket = "${{ inputs.bucket }}"
            
          }

          # Enable versioning
          resource "aws_s3_bucket_versioning" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            versioning_configuration {
              status = "Enabled"
            }
          }

          # Enable server-side encryption
          resource "aws_s3_bucket_server_side_encryption_configuration" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id
            rule {
              apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
              }
            }
          }

          # Block public access
          resource "aws_s3_bucket_public_access_block" "tf_state" {
            bucket = aws_s3_bucket.tf_state.id

            block_public_acls       = true
            block_public_policy     = true
            ignore_public_acls      = true
            restrict_public_buckets = true
          }

          # Output bucket name for confirmation
          output "bucket_name" {
            value = aws_s3_bucket.tf_state.bucket
          }

          output "bucket_arn" {
            value = aws_s3_bucket.tf_state.arn
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        if: inputs.action == 'create_bucket'
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: inputs.action == 'destroy_bucket'
        run: terraform destroy -auto-approve
