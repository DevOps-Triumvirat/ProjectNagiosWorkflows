name: Create Nagios Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Create or destroy infrastructure for Nagios server"
        required: true
        type: choice
        options:
          - apply
          - destroy
      region:
        description: "AWS region for Nagios infra"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
      aws_account:
        description: "AWS account to use"
        required: true
        type: choice
        options:
          - alexander-test
          - eliza-dev
          - emir-production
      bucket_name:
        description: "S3 bucket name for Terraform state"
        required: true
        type: string
      bucket_region:
        description: "S3 bucket region"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
      bastion_instance_region:
        description: "Region where the bastion instance is deployed"
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1

  workflow_call:
    inputs:
      action:
        description: "Create or destroy infrastructure for Nagios server"
        required: true
        type: string
      region:
        description: "AWS region"
        required: true
        type: string
      aws_account:
        description: "AWS account to use"
        required: true
        type: string
      bucket_name:
        description: "S3 bucket name for Terraform state"
        required: true
        type: string
      bucket_region:
        description: "S3 bucket region"
        required: true
        type: string
      bastion_instance_region:
        description: "Region where the bastion instance is deployed"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.region }}
    
    steps:
      - name: Checkout Current Repository (ProjectNagiosWorkflows)
        uses: actions/checkout@v4
        with:
          path: ProjectNagiosWorkflows

      - name: Checkout Private Repository (ProjectNagios)
        uses: actions/checkout@v4
        with:
          repository: "DevOps-Triumvirat/ProjectNagios"
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: ProjectNagios

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS Credentials for Dev Account
        if: inputs.aws_account == 'eliza-dev'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Alexander Test
        if: inputs.aws_account == 'alexander-test'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials for Emir Production
        if: inputs.aws_account == 'emir-production'
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: ${{ inputs.region }}

      - name: Create terraform.tfvars from environment secret
        working-directory: ProjectNagios/Terraform/Nagios
        run: |
          # Load terraform.tfvars from environment-specific secret
          echo "${{ secrets.TERRAFORM_TFVARS }}" > terraform.tfvars
          
          # Override ALL user-selectable workflow inputs
          sed -i "s/^region = .*/region = \"${{ inputs.region }}\"/" terraform.tfvars
          sed -i "s/^shared_state_bucket = .*/shared_state_bucket = \"${{ inputs.bucket_name }}\"/" terraform.tfvars
          sed -i "s/^bastion_instance_region = .*/bastion_instance_region = \"${{ inputs.bastion_instance_region }}\"/" terraform.tfvars
          sed -i "s/^bastion_state_region = .*/bastion_state_region = \"${{ inputs.bucket_region }}\"/" terraform.tfvars
          
          # Debug: Show final terraform.tfvars content
          echo "=== Generated terraform.tfvars content ==="
          cat terraform.tfvars
          echo "=========================================="

      - name: Terraform Init
        working-directory: ProjectNagios/Terraform/Nagios
        run: |
          # Check if state file exists and is corrupted, remove it if needed
          aws s3 cp s3://${{ inputs.bucket_name }}/nagios/${{ inputs.region }}/terraform.tfstate ./check_state.json || echo "No existing state file"
          if [ -f "./check_state.json" ]; then
            if ! grep -q '"version"' ./check_state.json; then
              echo "Corrupted state file detected, removing it..."
              aws s3 rm s3://${{ inputs.bucket_name }}/nagios/${{ inputs.region }}/terraform.tfstate
            fi
            rm -f ./check_state.json
          fi
          
          terraform init -upgrade \
            -backend-config="bucket=${{ inputs.bucket_name }}" \
            -backend-config="key=nagios/${{ inputs.region }}/terraform.tfstate" \
            -backend-config="region=${{ inputs.bucket_region }}"

      - name: Terraform Plan
        working-directory: ProjectNagios/Terraform/Nagios
        run: terraform plan -var-file="terraform.tfvars"

      - name: Terraform Apply
        if: inputs.action == 'apply'
        working-directory: ProjectNagios/Terraform/Nagios
        run: terraform apply -auto-approve -var-file="terraform.tfvars"

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: ProjectNagios/Terraform/Nagios
        run: terraform destroy -auto-approve -var-file="terraform.tfvars"


        